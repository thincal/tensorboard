image: docker-registry.i.brainpp.cn/brain/ci-base:18.04

variables:
    - BAZEL=0.26.1
    - BAZEL_SHA256SUM=6c50e142a0a405d3d8598050d6c1b3920c8cdb82a7ffca6fc067cb474275148f
    - TF_VERSION_ID=tf-nightly==2.1.0.dev20191023

before_script:
    ################################
    # [travis.yml: before_install] #
    ################################
    - elapsed() { TZ=UTC printf "Time %(%T)T %s\n" "$SECONDS" "$1"; }
    - elapsed "before_install"
    - ci/download_bazel.sh "${BAZEL}" "${BAZEL_SHA256SUM}" ~/bazel
    - sudo mv ~/bazel /usr/local/bin/bazel
    - cp ci/bazelrc ~/.bazelrc
    - elapsed "before_install (done)"
    ################################
    # [travis.yml: install]        #
    ################################
    - elapsed "install"
    # Older versions of Pip sometimes resolve specifiers like `tf-nightly`
    # to versions other than the most recent(!).
    - pip install -U pip
    # Lint check deps.
    - pip install flake8==3.7.8
    - pip install yamllint==1.17.0
    # TensorBoard deps.
    - pip install futures==3.1.1
    - pip install grpcio==1.24.3
    - pip install grpcio-testing==1.24.3
    - pip install 'google-auth >= 1.6.3, < 2'
    - pip install 'google-auth-oauthlib >= 0.4.1, < 0.5'
    - yarn install --ignore-engines
    # Uninstall older Travis numpy to avoid upgrade-in-place issues.
    - pip uninstall -y numpy
    - |
        # Install TensorFlow if requested
        if [ -n "${TF_VERSION_ID}" ]; then
        pip install -I "${TF_VERSION_ID}"
        else
        # Requirements typically found through TensorFlow.
        pip install "absl-py>=0.7.0" \
        && pip install "numpy<2.0,>=1.14.5"
        fi
    # Deps for gfile S3 test.
    - pip install boto3==1.9.86
    - pip install moto==1.3.7
    # Workaround for https://github.com/travis-ci/travis-ci/issues/7940
    - sudo rm -f /etc/boto.cfg
    - pip freeze  # print installed distributions, for debugging purposes
    - elapsed "install (done)"
    ################################
    # [travis.yml: before_script]  #
    ################################
    - elapsed "before_script"
    # Do a fail-fast check for Python syntax errors or undefined names.
    # See: http://flake8.pycqa.org/en/3.7.8/user/error-codes.html
    # Use the comment '# noqa: <error code>' to suppress.
    - flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    # Lint frontend code
    - yarn lint
    # Lint .yaml docs files. Use '# yamllint disable-line rule:foo' to suppress.
    - yamllint -c docs/.yamllint docs docs/.yamllint
    # Make sure that IPython notebooks have valid Markdown.
    - tensorboard/tools/docs_list_format_test.sh
    # Make sure we aren't accidentally including work-in-progress code.
    - tensorboard/tools/do_not_submit_test.sh
    # Make sure all necessary files have the license information.
    - tensorboard/tools/license_test.sh
    # Make sure that build URLs are valid.
    - tensorboard/tools/mirror_urls_test.sh
    # Make sure that files have no trailing whitespace.
    - tensorboard/tools/whitespace_hygiene_test.py
    - |
        # Specify subset of tests to run depending on TF installation config.
        # We condition the value of --test_tag_filters so that we can run the
        # bazel test command unconditionally which produces nicer log output.
        if [ -z "${TF_VERSION_ID}" ]; then
        test_tag_filters=support_notf
        else
        test_tag_filters=
        fi
    - elapsed "before_script (done)"

stages:
    - build
    - test
    - deploy

style:
    stage: build
    script:
        ################################
        # [travis.yml: script]         #
        ################################
        - elapsed "script"
        # Note: bazel test implies fetch+build, but this gives us timing.
        - elapsed && bazel fetch //tensorboard/...
        - elapsed && bazel build //tensorboard/...
        - elapsed && bazel test //tensorboard/... --test_tag_filters="${test_tag_filters}"
        - elapsed && bazel run //tensorboard/pip_package:test_pip_package -- --default-python-only --tf-version "${TF_VERSION_ID}"

    variables:
        BRAIN_CPU: 4
        BRAIN_MEM: 4096
    retry: 2

release_pypi:
    stage: deploy
    dependencies:
        - unittest
        - doc
    script:
        - make wheel
        - devpi use "${DEVPI_URL}"
        - devpi login "${DEVPI_LOGIN}" --password="${DEVPI_PASSWORD}"
        - devpi upload dist/*.whl
    only:
        - /^v.*$/
    variables:
        BRAIN_CPU: 2
        BRAIN_MEM: 2048
    retry: 1

release_doc:
    stage: deploy
    dependencies:
        - unittest
        - doc
    script:
        - make doc
        - aws --endpoint-url=http://oss.wh-a.brainpp.cn s3 cp docs/_build/html/ s3://brainpp-py-sdk/ --recursive
    only:
        - /^v.*$/
    variables:
        BRAIN_CPU: 2
        BRAIN_MEM: 5120
    retry: 1

release_pypi_manually:
    stage: deploy
    when: manual
    dependencies:
        - unittest
        - doc
    script:
        - make wheel
        - devpi use "${DEVPI_URL}"
        - devpi login "${DEVPI_LOGIN}" --password="${DEVPI_PASSWORD}"
        - devpi upload dist/*.whl
    except:
        - tags
    variables:
        BRAIN_CPU: 2
        BRAIN_MEM: 2048
    retry: 1

release_doc_manually:
    stage: deploy
    when: manual
    dependencies:
        - unittest
        - doc
    script:
        - make doc
        - aws --endpoint-url=http://oss.wh-a.brainpp.cn s3 cp docs/_build/html/ s3://brainpp-py-sdk/ --recursive
    except:
        - tags
    variables:
        BRAIN_CPU: 2
        BRAIN_MEM: 5120
    retry: 1

